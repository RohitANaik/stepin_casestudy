
bin\Debug\stepin_casestudy.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000082  00800100  000004da  0000058e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004da  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800182  00800182  00000610  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00000610  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 000000a0  00000000  00000000  00000613  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000125  00000000  00000000  000006b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008e8  00000000  00000000  000007d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004a5  00000000  00000000  000010c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000088f  00000000  00000000  00001565  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000120  00000000  00000000  00001df4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000019c  00000000  00000000  00001f14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000213  00000000  00000000  000020b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000022c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ed       	ldi	r30, 0xDA	; 218
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a2 38       	cpi	r26, 0x82	; 130
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a2 e8       	ldi	r26, 0x82	; 130
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 38       	cpi	r26, 0x84	; 132
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 45 02 	call	0x48a	; 0x48a <main>
  9e:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_peripheral>:
#include "activity1.h"


void init_peripheral(void)
{
    DDRD |= (1<<PD2); // set PD2=1 for LED
  a6:	52 9a       	sbi	0x0a, 2	; 10
    DDRD &= ~(1<<PD0); //clear bit
  a8:	50 98       	cbi	0x0a, 0	; 10
    PORTD |= (1<<PD0); //set bit PD0 for SeatSwitch
  aa:	58 9a       	sbi	0x0b, 0	; 11
    DDRD &= ~(1<<PD1); //clear bit
  ac:	51 98       	cbi	0x0a, 1	; 10
    PORTD |= (1<<PD1); //set bit PD0 for HeaterSwitch
  ae:	59 9a       	sbi	0x0b, 1	; 11
}
  b0:	08 95       	ret

000000b2 <LED_ON>:

void LED_ON(){
    LED_PORT |= (1<<LED_PIN);
  b2:	5a 9a       	sbi	0x0b, 2	; 11
}
  b4:	08 95       	ret

000000b6 <LED_OFF>:

void LED_OFF(){
    LED_PORT &= ~(1<<LED_PIN);
  b6:	5a 98       	cbi	0x0b, 2	; 11
}
  b8:	08 95       	ret

000000ba <LED>:
#include "activity1.h"


void init_peripheral(void)
{
    DDRD |= (1<<PD2); // set PD2=1 for LED
  ba:	52 9a       	sbi	0x0a, 2	; 10
    DDRD &= ~(1<<PD0); //clear bit
  bc:	50 98       	cbi	0x0a, 0	; 10
    PORTD |= (1<<PD0); //set bit PD0 for SeatSwitch
  be:	58 9a       	sbi	0x0b, 0	; 11
    DDRD &= ~(1<<PD1); //clear bit
  c0:	51 98       	cbi	0x0a, 1	; 10
    PORTD |= (1<<PD1); //set bit PD0 for HeaterSwitch
  c2:	59 9a       	sbi	0x0b, 1	; 11

int FLAG=0;
int LED(void)
{
       init_peripheral();
        if(!(PIND&(1<<BUTTON_SENSOR )) && !(PIND&(1<<TEMP_SENSOR))) //if both the switches are pressed
  c4:	48 99       	sbic	0x09, 0	; 9
  c6:	02 c0       	rjmp	.+4      	; 0xcc <LED+0x12>
  c8:	49 9b       	sbis	0x09, 1	; 9
  ca:	09 c0       	rjmp	.+18     	; 0xde <LED+0x24>
        {
            FLAG=1;
        }
        else  // other cases
        {
            FLAG=0;
  cc:	10 92 83 01 	sts	0x0183, r1
  d0:	10 92 82 01 	sts	0x0182, r1
        }
    return FLAG;
}
  d4:	80 91 82 01 	lds	r24, 0x0182
  d8:	90 91 83 01 	lds	r25, 0x0183
  dc:	08 95       	ret
int LED(void)
{
       init_peripheral();
        if(!(PIND&(1<<BUTTON_SENSOR )) && !(PIND&(1<<TEMP_SENSOR))) //if both the switches are pressed
        {
            FLAG=1;
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	90 93 83 01 	sts	0x0183, r25
  e6:	80 93 82 01 	sts	0x0182, r24
        else  // other cases
        {
            FLAG=0;
        }
    return FLAG;
}
  ea:	80 91 82 01 	lds	r24, 0x0182
  ee:	90 91 83 01 	lds	r25, 0x0183
  f2:	08 95       	ret

000000f4 <Init_ADC>:

#include "activity2.h"

void Init_ADC()
{
    ADMUX=(1<<REFS0);
  f4:	80 e4       	ldi	r24, 0x40	; 64
  f6:	80 93 7c 00 	sts	0x007C, r24
    ADCSRA= (1<<ADEN)|(7<<ADPS0);
  fa:	87 e8       	ldi	r24, 0x87	; 135
  fc:	80 93 7a 00 	sts	0x007A, r24
}
 100:	08 95       	ret

00000102 <Read_ADC>:

uint16_t Read_ADC(uint8_t ch)
{
    ADMUX&=0xf8;
 102:	90 91 7c 00 	lds	r25, 0x007C
 106:	98 7f       	andi	r25, 0xF8	; 248
 108:	90 93 7c 00 	sts	0x007C, r25
    ch=ch&0b00000111;
    ADMUX|=ch;
 10c:	90 91 7c 00 	lds	r25, 0x007C
 110:	87 70       	andi	r24, 0x07	; 7
 112:	89 2b       	or	r24, r25
 114:	80 93 7c 00 	sts	0x007C, r24

    ADCSRA|=(1<<ADSC);
 118:	80 91 7a 00 	lds	r24, 0x007A
 11c:	80 64       	ori	r24, 0x40	; 64
 11e:	80 93 7a 00 	sts	0x007A, r24
    while(!(ADCSRA & (1<<ADIF)));
 122:	80 91 7a 00 	lds	r24, 0x007A
 126:	84 ff       	sbrs	r24, 4
 128:	fc cf       	rjmp	.-8      	; 0x122 <Read_ADC+0x20>
    ADCSRA|=(1<<ADIF);
 12a:	80 91 7a 00 	lds	r24, 0x007A
 12e:	80 61       	ori	r24, 0x10	; 16
 130:	80 93 7a 00 	sts	0x007A, r24
    return(ADC);
 134:	20 91 78 00 	lds	r18, 0x0078
 138:	30 91 79 00 	lds	r19, 0x0079
}
 13c:	c9 01       	movw	r24, r18
 13e:	08 95       	ret

00000140 <GetADC>:

#include "activity2.h"

void Init_ADC()
{
    ADMUX=(1<<REFS0);
 140:	80 e4       	ldi	r24, 0x40	; 64
 142:	80 93 7c 00 	sts	0x007C, r24
    ADCSRA= (1<<ADEN)|(7<<ADPS0);
 146:	87 e8       	ldi	r24, 0x87	; 135
 148:	80 93 7a 00 	sts	0x007A, r24
}

uint16_t Read_ADC(uint8_t ch)
{
    ADMUX&=0xf8;
 14c:	80 91 7c 00 	lds	r24, 0x007C
 150:	88 7f       	andi	r24, 0xF8	; 248
 152:	80 93 7c 00 	sts	0x007C, r24
    ch=ch&0b00000111;
    ADMUX|=ch;
 156:	80 91 7c 00 	lds	r24, 0x007C
 15a:	80 93 7c 00 	sts	0x007C, r24

    ADCSRA|=(1<<ADSC);
 15e:	80 91 7a 00 	lds	r24, 0x007A
 162:	80 64       	ori	r24, 0x40	; 64
 164:	80 93 7a 00 	sts	0x007A, r24
    while(!(ADCSRA & (1<<ADIF)));
 168:	80 91 7a 00 	lds	r24, 0x007A
 16c:	84 ff       	sbrs	r24, 4
 16e:	fc cf       	rjmp	.-8      	; 0x168 <GetADC+0x28>
    ADCSRA|=(1<<ADIF);
 170:	80 91 7a 00 	lds	r24, 0x007A
 174:	80 61       	ori	r24, 0x10	; 16
 176:	80 93 7a 00 	sts	0x007A, r24
    return(ADC);
 17a:	20 91 78 00 	lds	r18, 0x0078
 17e:	30 91 79 00 	lds	r19, 0x0079
{
      Init_ADC();
      uint16_t temp;
      temp=Read_ADC(0);
      return temp;
}
 182:	c9 01       	movw	r24, r18
 184:	08 95       	ret

00000186 <Init_Timer>:
#include "activity3.h"
#include "activity2.h"

void Init_Timer()
{
    TCCR1A |= (1<<COM1A1)|(1<<WGM11)|(1<<WGM10);
 186:	e0 e8       	ldi	r30, 0x80	; 128
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	80 81       	ld	r24, Z
 18c:	83 68       	ori	r24, 0x83	; 131
 18e:	80 83       	st	Z, r24
    TCCR1B |= (1<<WGM12)|(1<<CS11)|(1<<CS10);
 190:	e1 e8       	ldi	r30, 0x81	; 129
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	80 81       	ld	r24, Z
 196:	8b 60       	ori	r24, 0x0B	; 11
 198:	80 83       	st	Z, r24
    DDRB |=(1<<PB1);
 19a:	21 9a       	sbi	0x04, 1	; 4
}
 19c:	08 95       	ret

0000019e <PWM>:

void PWM(uint16_t temp)
{
 19e:	9c 01       	movw	r18, r24
#include "activity3.h"
#include "activity2.h"

void Init_Timer()
{
    TCCR1A |= (1<<COM1A1)|(1<<WGM11)|(1<<WGM10);
 1a0:	80 91 80 00 	lds	r24, 0x0080
 1a4:	83 68       	ori	r24, 0x83	; 131
 1a6:	80 93 80 00 	sts	0x0080, r24
    TCCR1B |= (1<<WGM12)|(1<<CS11)|(1<<CS10);
 1aa:	80 91 81 00 	lds	r24, 0x0081
 1ae:	8b 60       	ori	r24, 0x0B	; 11
 1b0:	80 93 81 00 	sts	0x0081, r24
    DDRB |=(1<<PB1);
 1b4:	21 9a       	sbi	0x04, 1	; 4
}

void PWM(uint16_t temp)
{
    Init_Timer();
    if(temp>=0 && temp<=200){
 1b6:	29 3c       	cpi	r18, 0xC9	; 201
 1b8:	31 05       	cpc	r19, r1
 1ba:	a0 f4       	brcc	.+40     	; 0x1e4 <PWM+0x46>
            OCR1A = PWM_20_PERCENT;
 1bc:	8d ec       	ldi	r24, 0xCD	; 205
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	90 93 89 00 	sts	0x0089, r25
 1c4:	80 93 88 00 	sts	0x0088, r24
 1c8:	20 e0       	ldi	r18, 0x00	; 0
 1ca:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1cc:	40 e9       	ldi	r20, 0x90	; 144
 1ce:	51 e0       	ldi	r21, 0x01	; 1
 1d0:	ca 01       	movw	r24, r20
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <PWM+0x34>
 1d6:	2f 5f       	subi	r18, 0xFF	; 255
 1d8:	3f 4f       	sbci	r19, 0xFF	; 255
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1da:	87 e0       	ldi	r24, 0x07	; 7
 1dc:	20 3d       	cpi	r18, 0xD0	; 208
 1de:	38 07       	cpc	r19, r24
 1e0:	b9 f7       	brne	.-18     	; 0x1d0 <PWM+0x32>
 1e2:	08 95       	ret
            _delay_ms(200);
        }
        else if(temp>=210 && temp<=500){
 1e4:	c9 01       	movw	r24, r18
 1e6:	82 5d       	subi	r24, 0xD2	; 210
 1e8:	90 40       	sbci	r25, 0x00	; 0
 1ea:	83 52       	subi	r24, 0x23	; 35
 1ec:	91 40       	sbci	r25, 0x01	; 1
 1ee:	a0 f4       	brcc	.+40     	; 0x218 <PWM+0x7a>
             OCR1A = PWM_40_PERCENT;
 1f0:	8a e9       	ldi	r24, 0x9A	; 154
 1f2:	91 e0       	ldi	r25, 0x01	; 1
 1f4:	90 93 89 00 	sts	0x0089, r25
 1f8:	80 93 88 00 	sts	0x0088, r24
 1fc:	20 e0       	ldi	r18, 0x00	; 0
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	40 e9       	ldi	r20, 0x90	; 144
 202:	51 e0       	ldi	r21, 0x01	; 1
 204:	ca 01       	movw	r24, r20
 206:	01 97       	sbiw	r24, 0x01	; 1
 208:	f1 f7       	brne	.-4      	; 0x206 <PWM+0x68>
 20a:	2f 5f       	subi	r18, 0xFF	; 255
 20c:	3f 4f       	sbci	r19, 0xFF	; 255
 20e:	87 e0       	ldi	r24, 0x07	; 7
 210:	20 3d       	cpi	r18, 0xD0	; 208
 212:	38 07       	cpc	r19, r24
 214:	b9 f7       	brne	.-18     	; 0x204 <PWM+0x66>
 216:	08 95       	ret
            _delay_ms(200);
        }
        else if(temp>=510 && temp<=700){
 218:	c9 01       	movw	r24, r18
 21a:	8e 5f       	subi	r24, 0xFE	; 254
 21c:	91 40       	sbci	r25, 0x01	; 1
 21e:	8f 3b       	cpi	r24, 0xBF	; 191
 220:	91 05       	cpc	r25, r1
 222:	c8 f0       	brcs	.+50     	; 0x256 <PWM+0xb8>
             OCR1A = PWM_70_PERCENT;
            _delay_ms(200);
        }
        else if(temp>=710 && temp<=1024){
 224:	26 5c       	subi	r18, 0xC6	; 198
 226:	32 40       	sbci	r19, 0x02	; 2
 228:	2b 53       	subi	r18, 0x3B	; 59
 22a:	31 40       	sbci	r19, 0x01	; 1
 22c:	40 f5       	brcc	.+80     	; 0x27e <PWM+0xe0>
             OCR1A = PWM_95_PERCENT;
 22e:	8d ec       	ldi	r24, 0xCD	; 205
 230:	93 e0       	ldi	r25, 0x03	; 3
 232:	90 93 89 00 	sts	0x0089, r25
 236:	80 93 88 00 	sts	0x0088, r24
 23a:	20 e0       	ldi	r18, 0x00	; 0
 23c:	30 e0       	ldi	r19, 0x00	; 0
 23e:	40 e9       	ldi	r20, 0x90	; 144
 240:	51 e0       	ldi	r21, 0x01	; 1
 242:	ca 01       	movw	r24, r20
 244:	01 97       	sbiw	r24, 0x01	; 1
 246:	f1 f7       	brne	.-4      	; 0x244 <PWM+0xa6>
 248:	2f 5f       	subi	r18, 0xFF	; 255
 24a:	3f 4f       	sbci	r19, 0xFF	; 255
 24c:	87 e0       	ldi	r24, 0x07	; 7
 24e:	20 3d       	cpi	r18, 0xD0	; 208
 250:	38 07       	cpc	r19, r24
 252:	b9 f7       	brne	.-18     	; 0x242 <PWM+0xa4>
 254:	08 95       	ret
        else if(temp>=210 && temp<=500){
             OCR1A = PWM_40_PERCENT;
            _delay_ms(200);
        }
        else if(temp>=510 && temp<=700){
             OCR1A = PWM_70_PERCENT;
 256:	8d ec       	ldi	r24, 0xCD	; 205
 258:	92 e0       	ldi	r25, 0x02	; 2
 25a:	90 93 89 00 	sts	0x0089, r25
 25e:	80 93 88 00 	sts	0x0088, r24
 262:	20 e0       	ldi	r18, 0x00	; 0
 264:	30 e0       	ldi	r19, 0x00	; 0
 266:	40 e9       	ldi	r20, 0x90	; 144
 268:	51 e0       	ldi	r21, 0x01	; 1
 26a:	ca 01       	movw	r24, r20
 26c:	01 97       	sbiw	r24, 0x01	; 1
 26e:	f1 f7       	brne	.-4      	; 0x26c <PWM+0xce>
 270:	2f 5f       	subi	r18, 0xFF	; 255
 272:	3f 4f       	sbci	r19, 0xFF	; 255
 274:	87 e0       	ldi	r24, 0x07	; 7
 276:	20 3d       	cpi	r18, 0xD0	; 208
 278:	38 07       	cpc	r19, r24
 27a:	b9 f7       	brne	.-18     	; 0x26a <PWM+0xcc>
 27c:	08 95       	ret
        else if(temp>=710 && temp<=1024){
             OCR1A = PWM_95_PERCENT;
            _delay_ms(200);
        }
        else{
            OCR1A=0;
 27e:	10 92 89 00 	sts	0x0089, r1
 282:	10 92 88 00 	sts	0x0088, r1
 286:	20 e0       	ldi	r18, 0x00	; 0
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	40 e9       	ldi	r20, 0x90	; 144
 28c:	51 e0       	ldi	r21, 0x01	; 1
 28e:	ca 01       	movw	r24, r20
 290:	01 97       	sbiw	r24, 0x01	; 1
 292:	f1 f7       	brne	.-4      	; 0x290 <PWM+0xf2>
 294:	2f 5f       	subi	r18, 0xFF	; 255
 296:	3f 4f       	sbci	r19, 0xFF	; 255
 298:	87 e0       	ldi	r24, 0x07	; 7
 29a:	20 3d       	cpi	r18, 0xD0	; 208
 29c:	38 07       	cpc	r19, r24
 29e:	b9 f7       	brne	.-18     	; 0x28e <PWM+0xf0>
 2a0:	08 95       	ret

000002a2 <Init_USART>:

#include "activity4.h"

void Init_USART()
{
    UBRR0H = (uint8_t)(UBRR_VALUE>>8);
 2a2:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = (uint8_t)UBRR_VALUE;
 2a6:	87 e6       	ldi	r24, 0x67	; 103
 2a8:	80 93 c4 00 	sts	0x00C4, r24
    UCSR0C=(1<<UMSEL00)|(1<<UCSZ01)|(1<<UCSZ00);
 2ac:	86 e4       	ldi	r24, 0x46	; 70
 2ae:	80 93 c2 00 	sts	0x00C2, r24
    UCSR0B=(1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0)|(1<<TXCIE0);
 2b2:	88 ed       	ldi	r24, 0xD8	; 216
 2b4:	80 93 c1 00 	sts	0x00C1, r24
}
 2b8:	08 95       	ret

000002ba <Read_USART>:

int Read_USART()
{
    while(!(UCSR0A &(1<<RXC0)))
 2ba:	80 91 c0 00 	lds	r24, 0x00C0
 2be:	87 ff       	sbrs	r24, 7
 2c0:	fc cf       	rjmp	.-8      	; 0x2ba <Read_USART>
    {
        //Do nothing
    }
    return UDR0;
 2c2:	80 91 c6 00 	lds	r24, 0x00C6
}
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	08 95       	ret

000002ca <USARTWrite>:

void USARTWrite(uint16_t temp)
{
 2ca:	df 93       	push	r29
 2cc:	cf 93       	push	r28
 2ce:	cd b7       	in	r28, 0x3d	; 61
 2d0:	de b7       	in	r29, 0x3e	; 62
 2d2:	e3 97       	sbiw	r28, 0x33	; 51
 2d4:	0f b6       	in	r0, 0x3f	; 63
 2d6:	f8 94       	cli
 2d8:	de bf       	out	0x3e, r29	; 62
 2da:	0f be       	out	0x3f, r0	; 63
 2dc:	cd bf       	out	0x3d, r28	; 61
 2de:	9c 01       	movw	r18, r24
    int i=0;
        if(temp>=0 && temp<=200){
 2e0:	89 3c       	cpi	r24, 0xC9	; 201
 2e2:	91 05       	cpc	r25, r1
 2e4:	68 f5       	brcc	.+90     	; 0x340 <USARTWrite+0x76>
            unsigned char data1[]="Temperature: 20 degree C\n";
 2e6:	de 01       	movw	r26, r28
 2e8:	5a 96       	adiw	r26, 0x1a	; 26
 2ea:	e0 e0       	ldi	r30, 0x00	; 0
 2ec:	f1 e0       	ldi	r31, 0x01	; 1
 2ee:	8a e1       	ldi	r24, 0x1A	; 26
 2f0:	01 90       	ld	r0, Z+
 2f2:	0d 92       	st	X+, r0
 2f4:	81 50       	subi	r24, 0x01	; 1
 2f6:	e1 f7       	brne	.-8      	; 0x2f0 <USARTWrite+0x26>
            i=0;
            while(data1[i]!=0){
 2f8:	9a 8d       	ldd	r25, Y+26	; 0x1a
 2fa:	99 23       	and	r25, r25
 2fc:	59 f0       	breq	.+22     	; 0x314 <USARTWrite+0x4a>
 2fe:	fe 01       	movw	r30, r28
 300:	7b 96       	adiw	r30, 0x1b	; 27
            while (!( UCSR0A & (1<<UDRE0)));  // Wait for empty transmit buffer
 302:	80 91 c0 00 	lds	r24, 0x00C0
 306:	85 ff       	sbrs	r24, 5
 308:	fc cf       	rjmp	.-8      	; 0x302 <USARTWrite+0x38>
            UDR0 = data1[i];                 // Put data into buffer, sends the data
 30a:	90 93 c6 00 	sts	0x00C6, r25
{
    int i=0;
        if(temp>=0 && temp<=200){
            unsigned char data1[]="Temperature: 20 degree C\n";
            i=0;
            while(data1[i]!=0){
 30e:	91 91       	ld	r25, Z+
 310:	99 23       	and	r25, r25
 312:	b9 f7       	brne	.-18     	; 0x302 <USARTWrite+0x38>
 314:	20 e0       	ldi	r18, 0x00	; 0
 316:	30 e0       	ldi	r19, 0x00	; 0
 318:	40 e9       	ldi	r20, 0x90	; 144
 31a:	51 e0       	ldi	r21, 0x01	; 1
 31c:	ca 01       	movw	r24, r20
 31e:	01 97       	sbiw	r24, 0x01	; 1
 320:	f1 f7       	brne	.-4      	; 0x31e <USARTWrite+0x54>
 322:	2f 5f       	subi	r18, 0xFF	; 255
 324:	3f 4f       	sbci	r19, 0xFF	; 255
 326:	8e e4       	ldi	r24, 0x4E	; 78
 328:	20 32       	cpi	r18, 0x20	; 32
 32a:	38 07       	cpc	r19, r24
 32c:	b9 f7       	brne	.-18     	; 0x31c <USARTWrite+0x52>
            i++;
            }
            _delay_ms(2000);

        }
}
 32e:	e3 96       	adiw	r28, 0x33	; 51
 330:	0f b6       	in	r0, 0x3f	; 63
 332:	f8 94       	cli
 334:	de bf       	out	0x3e, r29	; 62
 336:	0f be       	out	0x3f, r0	; 63
 338:	cd bf       	out	0x3d, r28	; 61
 33a:	cf 91       	pop	r28
 33c:	df 91       	pop	r29
 33e:	08 95       	ret
            UDR0 = data1[i];                 // Put data into buffer, sends the data
            i++;
            }
            _delay_ms(2000);
        }
        else if(temp>=210 && temp<=500){
 340:	82 5d       	subi	r24, 0xD2	; 210
 342:	90 40       	sbci	r25, 0x00	; 0
 344:	83 52       	subi	r24, 0x23	; 35
 346:	91 40       	sbci	r25, 0x01	; 1
 348:	28 f5       	brcc	.+74     	; 0x394 <USARTWrite+0xca>
            unsigned char data2[]="Temperature: 25 degree C\n";
 34a:	de 01       	movw	r26, r28
 34c:	5a 96       	adiw	r26, 0x1a	; 26
 34e:	ea e1       	ldi	r30, 0x1A	; 26
 350:	f1 e0       	ldi	r31, 0x01	; 1
 352:	8a e1       	ldi	r24, 0x1A	; 26
 354:	01 90       	ld	r0, Z+
 356:	0d 92       	st	X+, r0
 358:	81 50       	subi	r24, 0x01	; 1
 35a:	e1 f7       	brne	.-8      	; 0x354 <USARTWrite+0x8a>
            i=0;
            while(data2[i]!=0){
 35c:	9a 8d       	ldd	r25, Y+26	; 0x1a
 35e:	99 23       	and	r25, r25
 360:	59 f0       	breq	.+22     	; 0x378 <USARTWrite+0xae>
 362:	fe 01       	movw	r30, r28
 364:	7b 96       	adiw	r30, 0x1b	; 27
            while (!( UCSR0A & (1<<UDRE0)));  // Wait for empty transmit buffer
 366:	80 91 c0 00 	lds	r24, 0x00C0
 36a:	85 ff       	sbrs	r24, 5
 36c:	fc cf       	rjmp	.-8      	; 0x366 <USARTWrite+0x9c>
            UDR0 = data2[i];                 // Put data into buffer, sends the data
 36e:	90 93 c6 00 	sts	0x00C6, r25
            _delay_ms(2000);
        }
        else if(temp>=210 && temp<=500){
            unsigned char data2[]="Temperature: 25 degree C\n";
            i=0;
            while(data2[i]!=0){
 372:	91 91       	ld	r25, Z+
 374:	99 23       	and	r25, r25
 376:	b9 f7       	brne	.-18     	; 0x366 <USARTWrite+0x9c>
 378:	20 e0       	ldi	r18, 0x00	; 0
 37a:	30 e0       	ldi	r19, 0x00	; 0
 37c:	40 e9       	ldi	r20, 0x90	; 144
 37e:	51 e0       	ldi	r21, 0x01	; 1
 380:	ca 01       	movw	r24, r20
 382:	01 97       	sbiw	r24, 0x01	; 1
 384:	f1 f7       	brne	.-4      	; 0x382 <USARTWrite+0xb8>
 386:	2f 5f       	subi	r18, 0xFF	; 255
 388:	3f 4f       	sbci	r19, 0xFF	; 255
 38a:	8e e4       	ldi	r24, 0x4E	; 78
 38c:	20 32       	cpi	r18, 0x20	; 32
 38e:	38 07       	cpc	r19, r24
 390:	b9 f7       	brne	.-18     	; 0x380 <USARTWrite+0xb6>
 392:	cd cf       	rjmp	.-102    	; 0x32e <USARTWrite+0x64>
            UDR0 = data2[i];                 // Put data into buffer, sends the data
            i++;
            }
            _delay_ms(2000);
        }
        else if(temp>=510 && temp<=700){
 394:	c9 01       	movw	r24, r18
 396:	8e 5f       	subi	r24, 0xFE	; 254
 398:	91 40       	sbci	r25, 0x01	; 1
 39a:	8f 3b       	cpi	r24, 0xBF	; 191
 39c:	91 05       	cpc	r25, r1
 39e:	58 f1       	brcs	.+86     	; 0x3f6 <USARTWrite+0x12c>
            UDR0 = data3[i];                 // Put data into buffer, sends the data
            i++;
            }
            _delay_ms(2000);
        }
        else if(temp>=710 && temp<=1024){
 3a0:	26 5c       	subi	r18, 0xC6	; 198
 3a2:	32 40       	sbci	r19, 0x02	; 2
 3a4:	2b 53       	subi	r18, 0x3B	; 59
 3a6:	31 40       	sbci	r19, 0x01	; 1
 3a8:	08 f0       	brcs	.+2      	; 0x3ac <USARTWrite+0xe2>
 3aa:	4a c0       	rjmp	.+148    	; 0x440 <USARTWrite+0x176>
            unsigned char data4[]="Temperature: 33 degree C\n";
 3ac:	de 01       	movw	r26, r28
 3ae:	5a 96       	adiw	r26, 0x1a	; 26
 3b0:	e4 e3       	ldi	r30, 0x34	; 52
 3b2:	f1 e0       	ldi	r31, 0x01	; 1
 3b4:	8a e1       	ldi	r24, 0x1A	; 26
 3b6:	01 90       	ld	r0, Z+
 3b8:	0d 92       	st	X+, r0
 3ba:	81 50       	subi	r24, 0x01	; 1
 3bc:	e1 f7       	brne	.-8      	; 0x3b6 <USARTWrite+0xec>
            i=0;
            while(data4[i]!=0){
 3be:	9a 8d       	ldd	r25, Y+26	; 0x1a
 3c0:	99 23       	and	r25, r25
 3c2:	59 f0       	breq	.+22     	; 0x3da <USARTWrite+0x110>
 3c4:	fe 01       	movw	r30, r28
 3c6:	7b 96       	adiw	r30, 0x1b	; 27
            while (!( UCSR0A & (1<<UDRE0)));  // Wait for empty transmit buffer
 3c8:	80 91 c0 00 	lds	r24, 0x00C0
 3cc:	85 ff       	sbrs	r24, 5
 3ce:	fc cf       	rjmp	.-8      	; 0x3c8 <USARTWrite+0xfe>
            UDR0 = data4[i];                 // Put data into buffer, sends the data
 3d0:	90 93 c6 00 	sts	0x00C6, r25
            _delay_ms(2000);
        }
        else if(temp>=710 && temp<=1024){
            unsigned char data4[]="Temperature: 33 degree C\n";
            i=0;
            while(data4[i]!=0){
 3d4:	91 91       	ld	r25, Z+
 3d6:	99 23       	and	r25, r25
 3d8:	b9 f7       	brne	.-18     	; 0x3c8 <USARTWrite+0xfe>
 3da:	20 e0       	ldi	r18, 0x00	; 0
 3dc:	30 e0       	ldi	r19, 0x00	; 0
 3de:	40 e9       	ldi	r20, 0x90	; 144
 3e0:	51 e0       	ldi	r21, 0x01	; 1
 3e2:	ca 01       	movw	r24, r20
 3e4:	01 97       	sbiw	r24, 0x01	; 1
 3e6:	f1 f7       	brne	.-4      	; 0x3e4 <USARTWrite+0x11a>
 3e8:	2f 5f       	subi	r18, 0xFF	; 255
 3ea:	3f 4f       	sbci	r19, 0xFF	; 255
 3ec:	8e e4       	ldi	r24, 0x4E	; 78
 3ee:	20 32       	cpi	r18, 0x20	; 32
 3f0:	38 07       	cpc	r19, r24
 3f2:	b9 f7       	brne	.-18     	; 0x3e2 <USARTWrite+0x118>
 3f4:	9c cf       	rjmp	.-200    	; 0x32e <USARTWrite+0x64>
            i++;
            }
            _delay_ms(2000);
        }
        else if(temp>=510 && temp<=700){
             unsigned char data3[]="Temperature: 29 degree C\n";
 3f6:	de 01       	movw	r26, r28
 3f8:	5a 96       	adiw	r26, 0x1a	; 26
 3fa:	ee e4       	ldi	r30, 0x4E	; 78
 3fc:	f1 e0       	ldi	r31, 0x01	; 1
 3fe:	8a e1       	ldi	r24, 0x1A	; 26
 400:	01 90       	ld	r0, Z+
 402:	0d 92       	st	X+, r0
 404:	81 50       	subi	r24, 0x01	; 1
 406:	e1 f7       	brne	.-8      	; 0x400 <USARTWrite+0x136>
            i=0;
            while(data3[i]!=0){
 408:	9a 8d       	ldd	r25, Y+26	; 0x1a
 40a:	99 23       	and	r25, r25
 40c:	59 f0       	breq	.+22     	; 0x424 <USARTWrite+0x15a>
 40e:	fe 01       	movw	r30, r28
 410:	7b 96       	adiw	r30, 0x1b	; 27
            while (!( UCSR0A & (1<<UDRE0)));  // Wait for empty transmit buffer
 412:	80 91 c0 00 	lds	r24, 0x00C0
 416:	85 ff       	sbrs	r24, 5
 418:	fc cf       	rjmp	.-8      	; 0x412 <USARTWrite+0x148>
            UDR0 = data3[i];                 // Put data into buffer, sends the data
 41a:	90 93 c6 00 	sts	0x00C6, r25
            _delay_ms(2000);
        }
        else if(temp>=510 && temp<=700){
             unsigned char data3[]="Temperature: 29 degree C\n";
            i=0;
            while(data3[i]!=0){
 41e:	91 91       	ld	r25, Z+
 420:	99 23       	and	r25, r25
 422:	b9 f7       	brne	.-18     	; 0x412 <USARTWrite+0x148>
 424:	20 e0       	ldi	r18, 0x00	; 0
 426:	30 e0       	ldi	r19, 0x00	; 0
 428:	40 e9       	ldi	r20, 0x90	; 144
 42a:	51 e0       	ldi	r21, 0x01	; 1
 42c:	ca 01       	movw	r24, r20
 42e:	01 97       	sbiw	r24, 0x01	; 1
 430:	f1 f7       	brne	.-4      	; 0x42e <USARTWrite+0x164>
 432:	2f 5f       	subi	r18, 0xFF	; 255
 434:	3f 4f       	sbci	r19, 0xFF	; 255
 436:	8e e4       	ldi	r24, 0x4E	; 78
 438:	20 32       	cpi	r18, 0x20	; 32
 43a:	38 07       	cpc	r19, r24
 43c:	b9 f7       	brne	.-18     	; 0x42c <USARTWrite+0x162>
 43e:	77 cf       	rjmp	.-274    	; 0x32e <USARTWrite+0x64>
            i++;
            }
            _delay_ms(2000);
        }
        else{
              unsigned char data5[]="Temperature: 0 degree C\n";
 440:	de 01       	movw	r26, r28
 442:	11 96       	adiw	r26, 0x01	; 1
 444:	e8 e6       	ldi	r30, 0x68	; 104
 446:	f1 e0       	ldi	r31, 0x01	; 1
 448:	89 e1       	ldi	r24, 0x19	; 25
 44a:	01 90       	ld	r0, Z+
 44c:	0d 92       	st	X+, r0
 44e:	81 50       	subi	r24, 0x01	; 1
 450:	e1 f7       	brne	.-8      	; 0x44a <USARTWrite+0x180>
            i=0;
            while(data5[i]!=0){
 452:	99 81       	ldd	r25, Y+1	; 0x01
 454:	99 23       	and	r25, r25
 456:	59 f0       	breq	.+22     	; 0x46e <USARTWrite+0x1a4>
 458:	fe 01       	movw	r30, r28
 45a:	32 96       	adiw	r30, 0x02	; 2
            while (!( UCSR0A & (1<<UDRE0)));  // Wait for empty transmit buffer
 45c:	80 91 c0 00 	lds	r24, 0x00C0
 460:	85 ff       	sbrs	r24, 5
 462:	fc cf       	rjmp	.-8      	; 0x45c <USARTWrite+0x192>
            UDR0 = data5[i];                 // Put data into buffer, sends the data
 464:	90 93 c6 00 	sts	0x00C6, r25
            _delay_ms(2000);
        }
        else{
              unsigned char data5[]="Temperature: 0 degree C\n";
            i=0;
            while(data5[i]!=0){
 468:	91 91       	ld	r25, Z+
 46a:	99 23       	and	r25, r25
 46c:	b9 f7       	brne	.-18     	; 0x45c <USARTWrite+0x192>
 46e:	20 e0       	ldi	r18, 0x00	; 0
 470:	30 e0       	ldi	r19, 0x00	; 0
 472:	40 e9       	ldi	r20, 0x90	; 144
 474:	51 e0       	ldi	r21, 0x01	; 1
 476:	ca 01       	movw	r24, r20
 478:	01 97       	sbiw	r24, 0x01	; 1
 47a:	f1 f7       	brne	.-4      	; 0x478 <USARTWrite+0x1ae>
 47c:	2f 5f       	subi	r18, 0xFF	; 255
 47e:	3f 4f       	sbci	r19, 0xFF	; 255
 480:	8e e4       	ldi	r24, 0x4E	; 78
 482:	20 32       	cpi	r18, 0x20	; 32
 484:	38 07       	cpc	r19, r24
 486:	b9 f7       	brne	.-18     	; 0x476 <USARTWrite+0x1ac>
 488:	52 cf       	rjmp	.-348    	; 0x32e <USARTWrite+0x64>

0000048a <main>:
#include "activity2.h"
#include "activity3.h"
#include "activity4.h"

int main(void)
{
 48a:	0f 93       	push	r16
 48c:	1f 93       	push	r17
 48e:	cf 93       	push	r28
 490:	df 93       	push	r29
 492:	c0 e9       	ldi	r28, 0x90	; 144
 494:	d1 e0       	ldi	r29, 0x01	; 1
    uint16_t tmp;

    while(1)
    {
        if(LED()==1) //Check if both the switches are pressed
 496:	0e 94 5d 00 	call	0xba	; 0xba <LED>
 49a:	01 97       	sbiw	r24, 0x01	; 1
 49c:	89 f0       	breq	.+34     	; 0x4c0 <main+0x36>
            PWM(tmp);         //this is to PWM output based on temperature
		        USARTWrite(tmp); //this is for Serial monitor to display Temperature
        }
        else  // other cases
        {
            LED_OFF();     //Turn LED OFF
 49e:	0e 94 5b 00 	call	0xb6	; 0xb6 <LED_OFF>
 4a2:	20 e0       	ldi	r18, 0x00	; 0
 4a4:	30 e0       	ldi	r19, 0x00	; 0
 4a6:	ce 01       	movw	r24, r28
 4a8:	01 97       	sbiw	r24, 0x01	; 1
 4aa:	f1 f7       	brne	.-4      	; 0x4a8 <main+0x1e>
 4ac:	2f 5f       	subi	r18, 0xFF	; 255
 4ae:	3f 4f       	sbci	r19, 0xFF	; 255
 4b0:	87 e0       	ldi	r24, 0x07	; 7
 4b2:	20 3d       	cpi	r18, 0xD0	; 208
 4b4:	38 07       	cpc	r19, r24
 4b6:	b9 f7       	brne	.-18     	; 0x4a6 <main+0x1c>
{
    uint16_t tmp;

    while(1)
    {
        if(LED()==1) //Check if both the switches are pressed
 4b8:	0e 94 5d 00 	call	0xba	; 0xba <LED>
 4bc:	01 97       	sbiw	r24, 0x01	; 1
 4be:	79 f7       	brne	.-34     	; 0x49e <main+0x14>
        {
            LED_ON();          //Turn LED ON
 4c0:	0e 94 59 00 	call	0xb2	; 0xb2 <LED_ON>
            tmp=GetADC();     //To Get the ADC value
 4c4:	0e 94 a0 00 	call	0x140	; 0x140 <GetADC>
 4c8:	8c 01       	movw	r16, r24
            PWM(tmp);         //this is to PWM output based on temperature
 4ca:	0e 94 cf 00 	call	0x19e	; 0x19e <PWM>
		        USARTWrite(tmp); //this is for Serial monitor to display Temperature
 4ce:	c8 01       	movw	r24, r16
 4d0:	0e 94 65 01 	call	0x2ca	; 0x2ca <USARTWrite>
 4d4:	e0 cf       	rjmp	.-64     	; 0x496 <main+0xc>

000004d6 <_exit>:
 4d6:	f8 94       	cli

000004d8 <__stop_program>:
 4d8:	ff cf       	rjmp	.-2      	; 0x4d8 <__stop_program>
